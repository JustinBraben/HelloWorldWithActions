name: Build/Test cross-platform CMake project

on:
  push:
    branches:
      - master
  pull_request:
    paths-ignore:
      - .github/workflows/dependency-cache.yaml
      - .github/workflows/msvc-analysis.yaml
  workflow_dispatch:

jobs:
  job:
    name: ${{ matrix.os }} - ${{ matrix.cmake_preset }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-12 ]
        cmake_preset: [ debug, release ]

    env:
      NUGET_SOURCE_NAME: github

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Fetch Ninja
      uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Authenticate to GitHub NuGet registry
      run: >
        nuget
        sources add
        -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        -storepasswordincleartext
        -name "${{ env.NUGET_SOURCE_NAME }}"
        -username "${{ github.actor }}"
        -password "${{ secrets.GITHUB_TOKEN }}"
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y libx11-dev libxrandr-dev libxi-dev libudev-dev libgl1-mesa-dev

    - name: Modify vcpkg directory permissions
      run: |
        if [ -d "/usr/local/share/vcpkg/" ]; then
          sudo chmod -R 777 /usr/local/share/vcpkg/
        fi
        if [ -d "/usr/local/bin/vcpkg" ]; then
          sudo chmod -R 777 /usr/local/bin/vcpkg/
        fi
      if: runner.os == 'Linux'

    - name: Configure Chocolatey Package Source on windows
      run: |
        choco source add -n=chocolatey -s=https://chocolatey.org/api/v2/
        choco source add -n=chocolatey-licensed -s=https://licensedpackages.chocolatey.org/api/v2/
      if: runner.os == 'Windows'

    - name: Install GNU Tar and Zstd on Windows
      run: |
        choco install tar --source=chocolatey
        refreshenv
        choco install zstd --source=chocolatey
        refreshenv
      if: runner.os == 'Windows'

    - name: Restore vcpkg
      uses: actions/cache@v3
      with:
        path: |
          /usr/local/share/vcpkg
          C:\vcpkg
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}

    - name: Set VCPKG_ROOT for Windows
      if: runner.os == 'Windows'
      run: |
        echo "Setting VCPKG_ROOT to C:\vcpkg"
        echo "VCPKG_ROOT=C:\vcpkg" >> $GITHUB_ENV
    - name: Set VCPKG_ROOT for Linux
      if: runner.os == 'Linux'
      run: |
        echo "Setting VCPKG_ROOT to /usr/local/share/vcpkg"
        echo "VCPKG_ROOT=/usr/local/share/vcpkg" >> $GITHUB_ENV
    - name: Set VCPKG_ROOT for macOS
      if: runner.os == 'macOS'
      run: |
        echo "Setting VCPKG_ROOT to /usr/local/share/vcpkg"
        echo "VCPKG_ROOT=/usr/local/share/vcpkg" >> $GITHUB_ENV
    - name: Use vcpkg to fetch dependencies
      env:
        VCPKG_BINARY_SOURCES: 'clear;nuget,${{ env.NUGET_SOURCE_NAME }},read'
      if: steps.cache-vcpkg.outputs.cache-hit == 'true'
      run: | 
          vcpkg install
    - name: List vcpkg directories (Linux)
      run: |
        ls -l /usr/local/share/vcpkg
        ls -l /usr/local/bin/vcpkg
        ls -l /usr/local/bin
        ls -l /usr/local
      if: runner.os == 'Linux'

    - name: List vcpkg directories (macOS)
      run: |
        ls -l /usr/local/share/vcpkg
        ls -l /usr/local/bin/vcpkg
        ls -l /usr/local/bin
        ls -l /usr/local
      if: runner.os == 'macOS'

    - name: List vcpkg directories (Windows)
      run: |
        dir C:\vcpkg
        dir
      shell: powershell
      if: runner.os == 'Windows'

    - name: Configure and run CMake
      uses: lukka/run-cmake@v10
      env:
        VCPKG_ROOT: ${{ fromJSON('[ "/usr/local/share/vcpkg", "C:\\vcpkg" ]')[runner.os == 'Windows'] }}
        CC: ${{ fromJSON('{"Linux":"gcc-10", "macOS":"clang", "Windows":"" }')[runner.os] }}
        CXX: ${{ fromJSON('{"Linux":"g++-10", "macOS":"clang++", "Windows":"" }')[runner.os] }}
      with:
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        configurePreset: ${{ matrix.cmake_preset }}
        buildPreset: ${{ matrix.cmake_preset }}
        testPreset: ${{ matrix.cmake_preset }}